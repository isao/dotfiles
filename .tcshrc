#onintr -  # ignore interrupts


#
# env vars
#
set path=(/opt/local/{,s,apache2/}bin /usr/local/bin /{,s}bin /usr/{,s}bin)
setenv EDITOR `which bbedit-w.sh nano pico edit vim vi | grep '^/' | head -1`
setenv CVSEDITOR $EDITOR
setenv SVN_EDITOR $EDITOR
setenv VISUAL $EDITOR
#setenv CVSROOT vault.yahoo.com:/CVSROOT
setenv CVS_RSH ssh
setenv CVSIGNORE '.DS_Store,._?*,.FBC*,.#?*'
setenv GREP_OPTIONS '--binary-files=without-match'
setenv LESS '--tabs=2 --LONG-PROMPT --ignore-case'
setenv RSYNC_RSH $CVS_RSH


# skip the rest if non-interactive shell
if($?USER == 0 || $?prompt == 0) exit

#
# aliases for built-ins
#
alias . pwd
alias .. 'cd ..'
alias cd.. 'cd ..'
alias ls 'ls-F'
alias ll '/bin/ls -lF \!*'
alias lsd '/bin/ls -l \!* | grep ^d'  # ls dirs only


#
# custom aliases
#
alias = "python -c 'print \!*'"
alias e $EDITOR
alias ip "ifconfig | grep 'inet '"
alias ls. '/bin/ls -dF .?*'  # ls dot files & dirs only
alias man2txt 'man \!* | col -b'
alias dict "curl -s 'dict://dict.org/d:\!*' | egrep -v '^[0-9]{3} .*|^\.'"
alias showenv 'env | sort'
alias showpath 'echo $PATH | tr : "\n"'
alias word 'grep \!* /usr/share/dict/words'
alias rmmacmeta "find \!* \( -name '.DS_Store' -or -name '._*' \) -exec rm -v \{\} \;"
alias rot13 'perl -wne "tr/a-zA-Z/n-za-mN-ZA-M/;print;"'

#
# built-in completions
#
complete {cd,lsd,pushd,popd,rmdir} 'C/*/d/'
complete chgrp 'p/1/g/'
complete df 'c/--/(all human-readable kilobytes local megabytes)/'
complete du 'c/--/(all total dereference-args human-readable kilobytes count-links dereference megabytes separate-dirs summarize one-file-system exclude-from exclude max-depth/'
complete {find,findfile.sh} 'n/-{,i}name/f/' 'n/-newer/f/' 'n/-{,n}cpio/f/' 'n/-exec/c/' 'n/-ok/c/' 'n/-user/u/' 'n/-group/g/' 'n/-fstype/(nfs 4.2)/' 'n/-type/(b c d f l p s)/' 'c/-/(and atime cpio ctime depth empty exec fstype group iname inum iregex ls maxdepth mindepth mtime name ncpio newer nogroup not nouser ok or path perm print prune regex size type user xdev)/' 'p/*/d/'
complete {{,e,f}grep,codegrep.sh} 'c/--/(after-context before-context context count exclude file files-with-matches files-without-match fixed-strings include invert-match no-filename no-messages only-matching perl-regexp recursive with-filename)/'
complete kill 'c/%/j/' 'c/-/S/'
complete killall 'c/-/S/' 'p/1/(-)/'
#see http://hea-www.harvard.edu/~fine/Tech/tcsh.html
complete ln 'C/?/f/' 'p/1/(-s)/' 'n/-s/x:[first arg is path to original file]/' 'N/-s/x:[second arg is new link]/'
complete {man,whereis,which} 'p/*/c/'
complete su 'c/-/(f l m)/' 'p/*/u/'
complete sudo 'p/1/c//'
complete tcpdump 'n@-i@`ifconfig -l`@'
complete wget 'c/--/(background debug verbose non-verbose output-document timestamping no-host-directories recursive)/'
complete uncomplete 'p/*/X/'

#
# app completions
#
if(-X bbedit) complete bbedit 'c/--/(background clean create front-window new-window print pipe-title worksheet view-top resume wait)/'
if(-X nano) complete nano 'c/--/(autoindent backup help nowrap)/'
if(-X port) complete port 'p/*/(search info variants deps dependents install uninstall activate deactivate installed location contents provides sync outdated upgrade clean echo list version selfupdate help)/' 'N/port/(all current active inactive installed uninstalled outdated)/'

#
# completions using optional external lists
#
if(-r Repos/shell/lists || -r repos/shell/lists) then
  # completion sets using personal lists
	set mylists=[rR]epos/shell/lists
  set myhosts=(`cat -s $mylists/hosts.txt| grep -v '^#'`)
  set myusers=(`cat -s $mylists/users.txt`)
  set cvsroots=(`cat -s $mylists/cvsroots.txt`)
  set cvspaths=(`cat -s $mylists/cvspaths.txt`)
  set svnurls=(`cat -s $mylists/svnurls.txt`)
  complete chown 'c/--/(changes help quiet recursive reference silent verbose version)/' 'c/*:/$myusers//' 'p/1/$myusers/:' 'p/*/f/'
  complete cvs 'n/-s/(CVS_RSH=ssh CVSEDITOR= USER=)/' 'n/-d/$cvsroots/' 'n/get/$cvspaths/' 'n/export/$cvspaths/' 'n/add/f/' 'n/commit/f/' 'n/diff/f/' 'n/import/f/' 'n/log/f/' 'n/status/f/' 'n/update/f/' 'n/-nq/(update)/' 'n/watch/(add remove)/' 'p/1/(add checkout commit diff export get history import log login rm rtag status tag update watch watchers)/'
  complete {host,nslookup,ping,route} 'p/*/$myhosts/'
  complete rsync 'c/*@/$myhosts//' 'c/--/(checksum copy-links cvs-exclude delete delete-excluded dry-run exclude-from= exclude= ignore-times include-from= include= modify-window= progress quiet recursive rsh=$CVS_RSH safe-links size-only times update verbose)/' 'p/*/f/'
  # complete scp 'c/*@/$myhosts//' 'p/*/f/'
  # From Michael Schroeder <mlschroe@immd4.informatik.uni-erlangen.de> 
  # This one will ssh to the file to fetch the list of files!
  complete scp 'c%*@*:%`set q=$:-0;set q="$q:s/@/ /";set q="$q:s/:/ /";set q=($q " ");$CVS_RSH $q[2] -l $q[1] ls -dp $q[3]\*`%' 'c%*:%`set q=$:-0;set q="$q:s/:/ /";set q=($q " ");$CVS_RSH $q[1] ls -dp $q[2]\*`%' 'c%*@%$myhosts%:' 'C@[./$~]*@f@' 'n/*/$myhosts/:'
  complete ssh 'c/*@/$myhosts//' 'p/*/$myusers/@'
	if(-X sshfs) complete sshfs 'c/*@/$myhosts/:/' 'p/1/$myusers/@'
  complete svn 'p/1/(add blame cat checkout cleanup commit copy delete diff export help import info list lock log merge mkdir move propdel propedit propget proplist propset resolved revert status switch unlock update)//' 'n/prop{del,edit,get,list,set}/(svn:executable svn:externals svn:ignore svn:keywords svn:mime-type)//' 'c/--/(quiet verbose username password)/' 'n/log/(--stop-on-copy)/' 'n/{checkout,list}/$svnurls/'
else
  complete chown 'c/--/(changes silent quiet verbose reference recursive help version)/' 'p/*/f/'
  complete cvs 'n/-s/(CVS_RSH=ssh CVSEDITOR= USER=)//' 'n/add/f/' 'n/commit/f/' 'n/diff/f/' 'n/import/f/' 'n/log/f/' 'n/status/f/' 'n/update/f/' 'n/-nq/(update)/' 'n/watch/(add remove)/' 'p/1/(add commit diff export get history import log login rm rtag status tag update watch watchers)/'
  complete rsync 'c/--/(checksum copy-links cvs-exclude delete delete-excluded exclude-from= exclude= ignore-times include-from= include= modify-window= progress quiet recursive rsh=$CVS_RSH safe-links size-only times update verbose)/' 'p/*/f/'
  complete svn 'p/1/(add blame cat checkout cleanup commit copy delete diff export help import info list lock log merge mkdir move propdel propedit propget proplist propset resolved revert status switch unlock update)//' 'n/prop{del,edit,get,list,set}/(svn:executable svn:externals svn:ignore svn:keywords svn:mime-type)//' 'c/--/(quiet verbose username password)/'
endif

# keys
bindkey "^I" complete-word-fwd
bindkey -k down history-search-forward
bindkey -k up history-search-backward
bindkey ^w delete-word # ctrl-w - fwd delete word
bindkey "^[[3~" delete-char  # fwd del key - fwd delete

# completions, corrections
# correct options are all | cmd | complete
set implicitcd
set correct = cmd
set complete = enhance

# ~/.history contains line: history -S
# histdup 'prev' no immediate dupes; 'all' no dupes in history
set history = 10000
set savehist = (10000 merge)
set histdup = 'prev'

# ls
set listflags = 'hx'
set listlinks
#unset addsuffix

# watch for local logins
set watch = ( 1 any any )
set who = '%B%n%b %a %l from host %B%M%b at %t'

# don't logout
set autologout = 0

# feedback
set notify
set noding
set ellipsis

# prompt, xterm title
switch ($TERM)
  case "xterm*":

		# %{string%}  includes string as a literal escape sequence
		# %n          user name
		# %m          short hostname
		# %c3         last 3 dirs of cwd w/ ~ substitution
		# %~          cwd w/ ~ substition
		# %T          24-hour time
		# %#          promptchars shell var; '#', '>', or '%', etc.
		# %L          clear to eol or eop
		# !#          history substution of current event
		if(-l /_whereami) then
			set prompt = '%{\033]0;%n@'`readlink /_whereami`':%c03\007%}%T%n%# %L'
			# currently running command(s)
			sched +0:00 alias postcmd 'printf "\033]0;%s %s\007" `readlink /_whereami` "\!#"'
		else
			set prompt = '%{\033]0;%n@%m:%c03\007%}%T%n%# %L'
			# currently running command(s)
			sched +0:00 alias postcmd 'printf "\033]0;%s %s\007" `hostname -s` "\!#"'
		endif
    breaksw

  default:
    set prompt = '%T%n@%m:%c2%# '
    breaksw
endsw

# see also some cool stuff in /usr/share/tcsh/examples/tcsh.defaults
#onintr # ignore interrupts
