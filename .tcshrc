#onintr -  # ignore interrupts


#
# env vars
#
set path=(/opt/brew/bin /opt/local/{,s,apache2/}bin /{,s}bin /usr/{,s,local/}bin)
setenv EDITOR `which bbedit..sh nano pico edit vim vi | grep '^/' | head -1`
setenv CVSEDITOR $EDITOR
setenv SVN_EDITOR $EDITOR
setenv VISUAL $EDITOR
#setenv CVSROOT vault.yahoo.com:/CVSROOT
setenv CVS_RSH ssh
setenv CVSIGNORE '.DS_Store,._?*,.FBC*,.#?*'
setenv GREP_OPTIONS '--binary-files=without-match'
setenv LESS '--tabs=2 --LONG-PROMPT --ignore-case --RAW-CONTROL-CHARS'
setenv RSYNC_RSH $CVS_RSH


# skip the rest if non-interactive shell
if($?USER == 0 || $?prompt == 0) exit

#
# aliases for built-ins
#
alias . pwd
alias .. 'cd ..'
alias cd.. 'cd ..'
alias ls 'ls-F'
alias ll '/bin/ls -lF \!*'
alias lsd '/bin/ls -l \!* | grep ^d'  # ls dirs only


#
# custom aliases
#
alias = "python -c 'print \!*'"
alias e $EDITOR
alias ip "ifconfig | grep 'inet '"
alias ls. '/bin/ls -dF .?*'  # ls dot files & dirs only
#http://episteme.arstechnica.com/eve/forums/a/tpc/f/8300945231/m/284004131041
#view man page as a PDF
if(-x /Applications/Preview.app) alias man2pdf 'man -t \!* | open -f -a /Applications/Preview.app'
alias man2txt 'man \!* | col -b'
alias dict "curl -s 'dict://dict.org/d:\!*' | egrep -v '^[0-9]{3} .*|^\.'"
alias showenv 'env | sort'
alias showpath 'echo $PATH | tr : "\n"'
alias checkpath 'ls -ld `echo $PATH | tr : "\n"`'
alias word 'grep \!* /usr/share/dict/words'
alias rmmacmeta "find \!* \( -name '.DS_Store' -or -name '._*' \) -exec rm -v \{\} \;"
alias rot13 'perl -wne "tr/a-zA-Z/n-za-mN-ZA-M/;print;"'

alias irclog 'ssh isao@devservices "tail \!* irclogs/localhost/?usx-fe.log"'
alias ircterm 'ssh -t isao@devservices "screen -dr irc"'

if(-X osascript) alias findercwd 'cd `osascript ~/Repos/shell/osx/findercwd.applescript`'

if(-X cdargs && -r /opt/brew/Cellar/cdargs/1.35/contrib/cdargs-tcsh.csh) then
  source /opt/brew/Cellar/cdargs/1.35/contrib/cdargs-tcsh.csh
endif

if(-X svn) then
  #show status but ignore ? and X
  alias ss 'svn status --quiet --ignore-externals \!*'
  #show just ?
  alias ss? 'svn status \!* | grep ^\?'
  #show ?, ignored, externals
  alias ss?? "svn status --no-ignore \!* |egrep '^[?IX]'"
endif

if(-X git) then
  alias gs 'git status --short --untracked-files=no \!*'
  alias gs? 'git status --short --untracked-files=normal \!*'
  alias gu 'git gui \!*'
  if(-X bbdiff) alias gd 'git difftool \!*'
  #if(-X git) complete git 'p/1/(add bisect branch checkout clone commit config diff fetch grep init log merge mv pull push rebase reset rm show status tag)/'
  #set gitcmd='add am annotate apply archimport archive bisect blame branch bundle cat-file check-attr check-ref-format checkout checkout-index cherry cherry-pick citool clean clone commit commit-tree config count-objects cvsexportcommit cvsimport cvsserver daemon describe diff diff-files diff-index diff-tree difftool fast-export fast-import fetch fetch-pack filter-branch fmt-merge-msg for-each-ref format-patch fsck fsck-objects gc get-tar-commit-id grep gui hash-object help http-backend http-fetch http-push imap-send index-pack init init-db instaweb log lost-found ls-files ls-remote ls-tree mailinfo mailsplit merge merge-base merge-file merge-index merge-octopus merge-one-file merge-ours merge-recursive merge-resolve merge-subtree merge-tree mergetool mktag mktree mv name-rev notes pack-objects pack-redundant pack-refs patch-id peek-remote prune prune-packed pull push quiltimport read-tree rebase receive-pack reflog relink remote remote-ftp remote-ftps remote-http remote-https repack replace repo-config request-pull rerere reset rev-list rev-parse revert rm send-email send-pack shell shortlog show show-branch show-index show-ref stage stash status stripspace submodule symbolic-ref tag tar-tree unpack-file unpack-objects update-index update-ref update-server-info upload-archive upload-pack var verify-pack verify-tag whatchanged write-tree'
  set gitcmd='add am annotate apply archive bbdiff bisect blame branch bundle cat-file checkout cherry cherry-pick citool clean clone commit commit-tree config describe diff diff-files diff-index diff-tree difftool fast-export fast-import fetch filter-branch format-patch fsck gc grep gui help init log ls-files ls-remote ls-tree merge merge-base merge-file merge-one-file merge-ours merge-recursive merge-resolve merge-subtree merge-tree mergetool mktag mktree mv name-rev notes patch-id prune prune-packed pull push read-tree rebase reflog relink remote repack replace repo-config request-pull rerere reset rev-list rev-parse revert rm send-email shortlog show show-branch show-index show-ref stage stash status stripspace submodule symbolic-ref tag tar-tree update-index update-ref update-server-info var verify-tag whatchanged write-tree'
  #alias _gitdir 'git rev-parse --show-cdup'
  complete git "p/1/($gitcmd)/" "n/help/($gitcmd)/" 'n~checkout~F:.git/refs/heads~' 'N~branch~F:.git/refs/heads~' 'n/remote/(show add rm prune update)/' 'N/remote/`git remote`/'
endif

if(-X tig) then
  alias ts 'tig status'
  complete tig 'n/(show blame status help --)/' 'C/?/f/'
endif


#
# built-in completions
#
complete {cd,lsd,pushd,popd,rmdir} 'C/*/d/'
complete chgrp 'p/1/g/'
complete df 'c/--/(all human-readable kilobytes local megabytes)/'
complete du 'c/--/(all total dereference-args human-readable kilobytes count-links dereference megabytes separate-dirs summarize one-file-system exclude-from exclude max-depth/'
complete {find,findfile.sh} 'n/-{,i}name/f/' 'n/-newer/f/' 'n/-{,n}cpio/f/' 'n/-exec/c/' 'n/-ok/c/' 'n/-user/u/' 'n/-group/g/' 'n/-fstype/(nfs 4.2)/' 'n/-type/(b c d f l p s)/' 'c/-/(and atime cpio ctime depth empty exec fstype group iname inum iregex ls maxdepth mindepth mtime name ncpio newer nogroup not nouser ok or path perm print prune regex size type user xdev)/' 'p/*/d/'
complete {{,e,f}grep,codegrep.sh} 'c/--/(after-context before-context context count exclude file files-with-matches files-without-match fixed-strings include invert-match no-filename no-messages only-matching perl-regexp recursive with-filename)/'
complete kill 'c/%/j/' 'c/-/S/'
complete killall 'c/-/S/' 'p/1/(-)/'
#see http://hea-www.harvard.edu/~fine/Tech/tcsh.html
complete ln 'C/?/f/' 'p/1/(-s)/' 'n/-s/x:[first arg is path to original file]/' 'N/-s/x:[second arg is new link]/'
complete {man,whereis,which} 'p/*/c/'
complete su 'c/-/(f l m)/' 'p/*/u/'
complete sudo 'p/1/c/'
complete tcpdump 'n@-i@`ifconfig -l`@'
complete wget 'c/--/(background debug verbose non-verbose output-document timestamping no-host-directories recursive)/'
complete uncomplete 'p/*/X/'

#
# app completions
#
if(-X bbedit) complete bbedit 'c/--/(background clean create front-window maketags new-window print pipe-title scratchpad worksheet view-top resume wait)/'
if(-X nano) complete nano 'c/--/(autoindent backup help nowrap)/'
if(-X port) complete port 'p/*/(search info variants deps dependents install uninstall activate deactivate installed location contents provides sync outdated upgrade clean echo list version selfupdate help)/' 'N/port/(all current active inactive installed uninstalled outdated)/'

#
# completions using optional external lists
#
if(-r Repos/shell/lists || -r repos/shell/lists) then
  # completion sets using personal lists
	set mylists=[rR]epos/shell/lists
  set myhosts=(`cat -s $mylists/hosts.txt| grep -v '^#'`)
  set myusers=(`cat -s $mylists/users.txt`)
  set svnurls=(`cat -s $mylists/svnurls.txt`)
  complete chown 'c/--/(changes help quiet recursive reference silent verbose version)/' 'c/*:/$myusers//' 'p/1/$myusers/:' 'p/*/f/'
  complete {host,nslookup,ping,route} 'p/*/$myhosts/'
  complete rsync 'c/*@/$myhosts//' 'c/--/(checksum copy-links cvs-exclude delete delete-excluded dry-run exclude-from= exclude= ignore-times include-from= include= modify-window= progress quiet recursive rsh=$CVS_RSH safe-links size-only times update verbose)/' 'p/*/f/'
  # complete scp 'c/*@/$myhosts//' 'p/*/f/'
  # From Michael Schroeder <mlschroe@immd4.informatik.uni-erlangen.de> 
  # This one will ssh to the file to fetch the list of files!
  complete scp 'c%*@*:%`set q=$:-0;set q="$q:s/@/ /";set q="$q:s/:/ /";set q=($q " ");$CVS_RSH $q[2] -l $q[1] ls -dp $q[3]\*`%' 'c%*:%`set q=$:-0;set q="$q:s/:/ /";set q=($q " ");$CVS_RSH $q[1] ls -dp $q[2]\*`%' 'c%*@%$myhosts%:' 'C@[./$~]*@f@' 'n/*/$myhosts/:'
  complete ssh 'c/*@/$myhosts//' 'p/*/$myusers/@'
	#if(-X sshfs) complete sshfs 'c/*@/$myhosts/:/' 'p/1/$myusers/@'
  complete svn 'p/1/(add blame cat checkout cleanup commit copy delete diff export help import info list lock log merge mkdir move propdel propedit propget proplist propset resolved revert status switch unlock update)//' 'n/prop{del,edit,get,set}/(svn:executable svn:externals svn:ignore svn:keywords svn:mime-type)//' 'c/--/(quiet verbose username password)/' 'n/log/(--stop-on-copy)/' 'n/{checkout,list}/$svnurls/'
else
  complete chown 'c/--/(changes silent quiet verbose reference recursive help version)/' 'p/*/f/'
  complete rsync 'c/--/(checksum copy-links cvs-exclude delete delete-excluded exclude-from= exclude= ignore-times include-from= include= modify-window= progress quiet recursive rsh=$CVS_RSH safe-links size-only times update verbose)/' 'p/*/f/'
  complete svn 'p/1/(add blame cat checkout cleanup commit copy delete diff export help import info list lock log merge mkdir move propdel propedit propget proplist propset resolved revert status switch unlock update)//' 'n/prop{del,edit,get,set}/(svn:executable svn:externals svn:ignore svn:keywords svn:mime-type)//' 'c/--/(quiet verbose username password)/'
endif

# keys
bindkey "^[[5C" forward-word
bindkey "^[[C"  forward-word
bindkey "^[[5D" backward-word
bindkey "^[[D"  backward-word
bindkey "^I"    complete-word-fwd
bindkey -k down history-search-forward
bindkey -k up   history-search-backward
bindkey "^w"    delete-word
bindkey "^[[3~" delete-char

# completions, corrections
# correct options are all | cmd | complete
set implicitcd
set correct = cmd
set complete = enhance

# ~/.history contains line: history -S
# histdup 'prev' no immediate dupes; 'all' no dupes in history
set history = 10000
set savehist = (10000 merge)
set histdup = 'prev'

# ls
set listflags = 'hx'
set listlinks
#unset addsuffix

# watch for local logins
set watch = ( 1 any any )
set who = '%B%n%b %a %l from host %B%M%b at %t'

# don't logout
set autologout = 0

# feedback
set notify
set noding
set ellipsis

# prompt, xterm title
switch ($TERM)
  case "xterm*":

		# %{string%}  includes string as a literal escape sequence
		# %n          user name
		# %m          short hostname
		# %c3         last 3 dirs of cwd w/ ~ substitution
		# %~          cwd w/ ~ substition
		# %T          24-hour time
		# %#          promptchars shell var; '#', '>', or '%', etc.
		# %L          clear to eol or eop
		# !#          history substution of current event
		set prompt = '%{\033]0;%n@%m:%c03\007%}%T%n%# %L'
		# currently running command(s)
		sched +0:00 alias postcmd 'printf "\033]0;%s %s\007" `hostname -s` "\!#"'
    breaksw

  default:
    set prompt = '%T%n@%m:%c2%# '
    breaksw
endsw

# see also some cool stuff in /usr/share/tcsh/examples/tcsh.defaults
#onintr # ignore interrupts
